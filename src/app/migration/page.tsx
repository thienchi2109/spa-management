'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { 
  AlertTriangle, 
  CheckCircle, 
  XCircle, 
  Database, 
  FileSpreadsheet,
  ArrowRight,
  Download,
  Upload,
  Loader2
} from 'lucide-react';
// Types for migration results
interface MigrationResult {
  success: boolean;
  collectionName: string;
  recordCount: number;
  error?: string;
}

interface MigrationSummary {
  totalCollections: number;
  successfulMigrations: number;
  failedMigrations: number;
  totalRecords: number;
  results: MigrationResult[];
  errors: string[];
}
import { useToast } from '@/hooks/use-toast';

export default function MigrationPage() {
  const [migrationStatus, setMigrationStatus] = useState<'idle' | 'running' | 'completed' | 'error'>('idle');
  const [migrationSummary, setMigrationSummary] = useState<MigrationSummary | null>(null);
  const [currentStep, setCurrentStep] = useState<string>('');
  const [progress, setProgress] = useState(0);
  const { toast } = useToast();

  const handleFullMigration = async () => {
    setMigrationStatus('running');
    setProgress(0);
    setCurrentStep('Kh·ªüi t·∫°o migration...');

    try {
      // Step 1: Backup data
      setCurrentStep('ƒêang sao l∆∞u d·ªØ li·ªáu Firestore...');
      setProgress(10);
      
      const backupResponse = await fetch('/api/migration?action=backup');
      if (!backupResponse.ok) {
        throw new Error('Failed to backup data');
      }

      // Step 2: Run migration
      setCurrentStep('ƒêang chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang Google Sheets...');
      setProgress(30);
      
      const migrationResponse = await fetch('/api/migration', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ type: 'all' }),
      });

      if (!migrationResponse.ok) {
        throw new Error('Migration request failed');
      }

      const { summary } = await migrationResponse.json();
      
      setProgress(100);
      setMigrationSummary(summary);
      
      if (summary.failedMigrations === 0) {
        setMigrationStatus('completed');
        toast({
          title: 'Migration th√†nh c√¥ng!',
          description: `ƒê√£ chuy·ªÉn ƒë·ªïi ${summary.totalRecords} b·∫£n ghi t·ª´ ${summary.successfulMigrations} collection.`,
        });
      } else {
        setMigrationStatus('error');
        toast({
          variant: 'destructive',
          title: 'Migration ho√†n th√†nh v·ªõi l·ªói',
          description: `${summary.failedMigrations} collection g·∫∑p l·ªói trong qu√° tr√¨nh chuy·ªÉn ƒë·ªïi.`,
        });
      }
    } catch (error) {
      console.error('Migration failed:', error);
      setMigrationStatus('error');
      toast({
        variant: 'destructive',
        title: 'Migration th·∫•t b·∫°i',
        description: 'ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu.',
      });
    }
  };

  const handleSingleMigration = async (collectionName: string) => {
    setMigrationStatus('running');
    setCurrentStep(`ƒêang chuy·ªÉn ƒë·ªïi collection ${collectionName}...`);

    try {
      const migrationResponse = await fetch('/api/migration', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          type: 'single', 
          collection: collectionName 
        }),
      });

      if (!migrationResponse.ok) {
        throw new Error('Migration request failed');
      }

      const { result } = await migrationResponse.json();
      
      if (result.success) {
        toast({
          title: 'Migration th√†nh c√¥ng!',
          description: `ƒê√£ chuy·ªÉn ƒë·ªïi ${result.recordCount} b·∫£n ghi t·ª´ collection ${collectionName}.`,
        });
      } else {
        toast({
          variant: 'destructive',
          title: 'Migration th·∫•t b·∫°i',
          description: result.error || 'ƒê√£ c√≥ l·ªói x·∫£y ra.',
        });
      }
    } catch (error) {
      console.error('Single migration failed:', error);
      toast({
        variant: 'destructive',
        title: 'Migration th·∫•t b·∫°i',
        description: 'ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh chuy·ªÉn ƒë·ªïi.',
      });
    } finally {
      setMigrationStatus('idle');
    }
  };

  const collections = [
    { name: 'patients', displayName: 'B·ªánh nh√¢n', icon: 'üë•' },
    { name: 'appointments', displayName: 'L·ªãch h·∫πn', icon: 'üìÖ' },
    { name: 'medications', displayName: 'Thu·ªëc', icon: 'üíä' },
    { name: 'invoices', displayName: 'H√≥a ƒë∆°n', icon: 'üßæ' },
    { name: 'staff', displayName: 'Nh√¢n vi√™n', icon: 'üë®‚Äç‚öïÔ∏è' },
    { name: 'medicalRecords', displayName: 'H·ªì s∆° y t·∫ø', icon: 'üìã' },
    { name: 'prescriptions', displayName: 'ƒê∆°n thu·ªëc', icon: 'üìù' }
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-headline font-bold">Migration Database</h1>
        <Badge variant="outline" className="text-sm">
          Firestore ‚Üí Google Sheets
        </Badge>
      </div>

      {/* Warning Alert */}
      <Alert>
        <AlertTriangle className="h-4 w-4" />
        <AlertTitle>C·∫£nh b√°o quan tr·ªçng</AlertTitle>
        <AlertDescription>
          Qu√° tr√¨nh migration s·∫Ω chuy·ªÉn ƒë·ªïi to√†n b·ªô d·ªØ li·ªáu t·ª´ Firestore sang Google Sheets. 
          H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ c·∫•u h√¨nh ƒë√∫ng Google Sheets API v√† c√≥ quy·ªÅn truy c·∫≠p v√†o spreadsheet.
          D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c sao l∆∞u tr∆∞·ªõc khi migration.
        </AlertDescription>
      </Alert>

      {/* Migration Overview */}
      <div className="grid gap-6 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Database className="h-5 w-5" />
              Firestore (Ngu·ªìn)
            </CardTitle>
            <CardDescription>
              Database hi·ªán t·∫°i ƒëang s·ª≠ d·ª•ng
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <p className="text-sm text-muted-foreground">
                ‚Ä¢ D·ªØ li·ªáu b·ªánh nh√¢n, l·ªãch h·∫πn, thu·ªëc
              </p>
              <p className="text-sm text-muted-foreground">
                ‚Ä¢ H√≥a ƒë∆°n, nh√¢n vi√™n, h·ªì s∆° y t·∫ø
              </p>
              <p className="text-sm text-muted-foreground">
                ‚Ä¢ ƒê∆°n thu·ªëc v√† c√°c d·ªØ li·ªáu kh√°c
              </p>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileSpreadsheet className="h-5 w-5" />
              Google Sheets (ƒê√≠ch)
            </CardTitle>
            <CardDescription>
              Database m·ªõi s·∫Ω chuy·ªÉn sang
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <p className="text-sm text-muted-foreground">
                ‚Ä¢ D·ªÖ d√†ng truy c·∫≠p v√† ch·ªânh s·ª≠a
              </p>
              <p className="text-sm text-muted-foreground">
                ‚Ä¢ Chia s·∫ª v√† c·ªông t√°c tr·ª±c tuy·∫øn
              </p>
              <p className="text-sm text-muted-foreground">
                ‚Ä¢ T√≠ch h·ª£p v·ªõi Google Workspace
              </p>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Migration Progress */}
      {migrationStatus === 'running' && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Loader2 className="h-5 w-5 animate-spin" />
              ƒêang th·ª±c hi·ªán Migration
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>{currentStep}</span>
                <span>{progress}%</span>
              </div>
              <Progress value={progress} className="w-full" />
            </div>
          </CardContent>
        </Card>
      )}

      {/* Migration Results */}
      {migrationSummary && migrationStatus !== 'running' && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              {migrationStatus === 'completed' ? (
                <CheckCircle className="h-5 w-5 text-green-500" />
              ) : (
                <XCircle className="h-5 w-5 text-red-500" />
              )}
              K·∫øt qu·∫£ Migration
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid gap-4 md:grid-cols-3">
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">
                  {migrationSummary.successfulMigrations}
                </div>
                <div className="text-sm text-muted-foreground">Collections th√†nh c√¥ng</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-red-600">
                  {migrationSummary.failedMigrations}
                </div>
                <div className="text-sm text-muted-foreground">Collections th·∫•t b·∫°i</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">
                  {migrationSummary.totalRecords}
                </div>
                <div className="text-sm text-muted-foreground">T·ªïng b·∫£n ghi</div>
              </div>
            </div>

            {/* Detailed Results */}
            <div className="space-y-2">
              <h4 className="font-semibold">Chi ti·∫øt t·ª´ng Collection:</h4>
              {migrationSummary.results.map((result) => (
                <div key={result.collectionName} className="flex items-center justify-between p-2 border rounded">
                  <div className="flex items-center gap-2">
                    {result.success ? (
                      <CheckCircle className="h-4 w-4 text-green-500" />
                    ) : (
                      <XCircle className="h-4 w-4 text-red-500" />
                    )}
                    <span className="font-medium">{result.collectionName}</span>
                  </div>
                  <div className="text-sm text-muted-foreground">
                    {result.success ? `${result.recordCount} b·∫£n ghi` : result.error}
                  </div>
                </div>
              ))}
            </div>

            {migrationSummary.errors.length > 0 && (
              <div className="space-y-2">
                <h4 className="font-semibold text-red-600">L·ªói g·∫∑p ph·∫£i:</h4>
                {migrationSummary.errors.map((error, index) => (
                  <p key={index} className="text-sm text-red-600 bg-red-50 p-2 rounded">
                    {error}
                  </p>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Migration Actions */}
      <div className="grid gap-4 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>Migration to√†n b·ªô</CardTitle>
            <CardDescription>
              Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ Firestore sang Google Sheets
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Button 
              onClick={handleFullMigration}
              disabled={migrationStatus === 'running'}
              className="w-full"
              size="lg"
            >
              {migrationStatus === 'running' ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ƒêang migration...
                </>
              ) : (
                <>
                  <ArrowRight className="mr-2 h-4 w-4" />
                  B·∫Øt ƒë·∫ßu Migration to√†n b·ªô
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Migration t·ª´ng ph·∫ßn</CardTitle>
            <CardDescription>
              Chuy·ªÉn ƒë·ªïi t·ª´ng collection ri√™ng bi·ªát
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid gap-2">
              {collections.map((collection) => (
                <Button
                  key={collection.name}
                  variant="outline"
                  size="sm"
                  onClick={() => handleSingleMigration(collection.name)}
                  disabled={migrationStatus === 'running'}
                  className="justify-start"
                >
                  <span className="mr-2">{collection.icon}</span>
                  {collection.displayName}
                </Button>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Instructions */}
      <Card>
        <CardHeader>
          <CardTitle>H∆∞·ªõng d·∫´n chu·∫©n b·ªã</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <h4 className="font-semibold">1. C·∫•u h√¨nh Google Sheets API:</h4>
            <ul className="list-disc list-inside text-sm text-muted-foreground space-y-1">
              <li>T·∫°o project tr√™n Google Cloud Console</li>
              <li>B·∫≠t Google Sheets API</li>
              <li>T·∫°o Service Account v√† t·∫£i xu·ªëng key file</li>
              <li>C·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_SERVICE_ACCOUNT_CREDENTIALS</li>
            </ul>
          </div>
          
          <div className="space-y-2">
            <h4 className="font-semibold">2. T·∫°o Google Spreadsheet:</h4>
            <ul className="list-disc list-inside text-sm text-muted-foreground space-y-1">
              <li>T·∫°o spreadsheet m·ªõi tr√™n Google Sheets</li>
              <li>Chia s·∫ª v·ªõi Service Account email</li>
              <li>C·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_SHEETS_SPREADSHEET_ID</li>
            </ul>
          </div>

          <div className="space-y-2">
            <h4 className="font-semibold">3. Bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt:</h4>
            <div className="bg-muted p-3 rounded text-sm font-mono">
              <div>GOOGLE_SERVICE_ACCOUNT_CREDENTIALS={"{"}"type": "service_account", ...{"}"}</div>
              <div>GOOGLE_SHEETS_SPREADSHEET_ID=your_spreadsheet_id</div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}